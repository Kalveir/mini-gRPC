// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/category/v1/category.proto

package categoryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/pb/proto/category/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "proto.category.v1.CategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceCreateCategoryProcedure is the fully-qualified name of the CategoryService's
	// CreateCategory RPC.
	CategoryServiceCreateCategoryProcedure = "/proto.category.v1.CategoryService/CreateCategory"
	// CategoryServiceGetCategoryProcedure is the fully-qualified name of the CategoryService's
	// GetCategory RPC.
	CategoryServiceGetCategoryProcedure = "/proto.category.v1.CategoryService/GetCategory"
	// CategoryServiceListCategoriesProcedure is the fully-qualified name of the CategoryService's
	// ListCategories RPC.
	CategoryServiceListCategoriesProcedure = "/proto.category.v1.CategoryService/ListCategories"
	// CategoryServiceUpdateCategoryProcedure is the fully-qualified name of the CategoryService's
	// UpdateCategory RPC.
	CategoryServiceUpdateCategoryProcedure = "/proto.category.v1.CategoryService/UpdateCategory"
	// CategoryServiceDeleteCategoryProcedure is the fully-qualified name of the CategoryService's
	// DeleteCategory RPC.
	CategoryServiceDeleteCategoryProcedure = "/proto.category.v1.CategoryService/DeleteCategory"
)

// CategoryServiceClient is a client for the proto.category.v1.CategoryService service.
type CategoryServiceClient interface {
	CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error)
	GetCategory(context.Context, *connect.Request[v1.GetCategoryRequest]) (*connect.Response[v1.GetCategoryResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error)
	DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error)
}

// NewCategoryServiceClient constructs a client for the proto.category.v1.CategoryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	categoryServiceMethods := v1.File_proto_category_v1_category_proto.Services().ByName("CategoryService").Methods()
	return &categoryServiceClient{
		createCategory: connect.NewClient[v1.CreateCategoryRequest, v1.CreateCategoryResponse](
			httpClient,
			baseURL+CategoryServiceCreateCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("CreateCategory")),
			connect.WithClientOptions(opts...),
		),
		getCategory: connect.NewClient[v1.GetCategoryRequest, v1.GetCategoryResponse](
			httpClient,
			baseURL+CategoryServiceGetCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("GetCategory")),
			connect.WithClientOptions(opts...),
		),
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceListCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
			connect.WithClientOptions(opts...),
		),
		updateCategory: connect.NewClient[v1.UpdateCategoryRequest, v1.UpdateCategoryResponse](
			httpClient,
			baseURL+CategoryServiceUpdateCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("UpdateCategory")),
			connect.WithClientOptions(opts...),
		),
		deleteCategory: connect.NewClient[v1.DeleteCategoryRequest, v1.DeleteCategoryResponse](
			httpClient,
			baseURL+CategoryServiceDeleteCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("DeleteCategory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	createCategory *connect.Client[v1.CreateCategoryRequest, v1.CreateCategoryResponse]
	getCategory    *connect.Client[v1.GetCategoryRequest, v1.GetCategoryResponse]
	listCategories *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	updateCategory *connect.Client[v1.UpdateCategoryRequest, v1.UpdateCategoryResponse]
	deleteCategory *connect.Client[v1.DeleteCategoryRequest, v1.DeleteCategoryResponse]
}

// CreateCategory calls proto.category.v1.CategoryService.CreateCategory.
func (c *categoryServiceClient) CreateCategory(ctx context.Context, req *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error) {
	return c.createCategory.CallUnary(ctx, req)
}

// GetCategory calls proto.category.v1.CategoryService.GetCategory.
func (c *categoryServiceClient) GetCategory(ctx context.Context, req *connect.Request[v1.GetCategoryRequest]) (*connect.Response[v1.GetCategoryResponse], error) {
	return c.getCategory.CallUnary(ctx, req)
}

// ListCategories calls proto.category.v1.CategoryService.ListCategories.
func (c *categoryServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// UpdateCategory calls proto.category.v1.CategoryService.UpdateCategory.
func (c *categoryServiceClient) UpdateCategory(ctx context.Context, req *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error) {
	return c.updateCategory.CallUnary(ctx, req)
}

// DeleteCategory calls proto.category.v1.CategoryService.DeleteCategory.
func (c *categoryServiceClient) DeleteCategory(ctx context.Context, req *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error) {
	return c.deleteCategory.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the proto.category.v1.CategoryService service.
type CategoryServiceHandler interface {
	CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error)
	GetCategory(context.Context, *connect.Request[v1.GetCategoryRequest]) (*connect.Response[v1.GetCategoryResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error)
	DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceMethods := v1.File_proto_category_v1_category_proto.Services().ByName("CategoryService").Methods()
	categoryServiceCreateCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceCreateCategoryProcedure,
		svc.CreateCategory,
		connect.WithSchema(categoryServiceMethods.ByName("CreateCategory")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceGetCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceGetCategoryProcedure,
		svc.GetCategory,
		connect.WithSchema(categoryServiceMethods.ByName("GetCategory")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceListCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateCategoryProcedure,
		svc.UpdateCategory,
		connect.WithSchema(categoryServiceMethods.ByName("UpdateCategory")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteCategoryProcedure,
		svc.DeleteCategory,
		connect.WithSchema(categoryServiceMethods.ByName("DeleteCategory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.category.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceCreateCategoryProcedure:
			categoryServiceCreateCategoryHandler.ServeHTTP(w, r)
		case CategoryServiceGetCategoryProcedure:
			categoryServiceGetCategoryHandler.ServeHTTP(w, r)
		case CategoryServiceListCategoriesProcedure:
			categoryServiceListCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateCategoryProcedure:
			categoryServiceUpdateCategoryHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteCategoryProcedure:
			categoryServiceDeleteCategoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.category.v1.CategoryService.CreateCategory is not implemented"))
}

func (UnimplementedCategoryServiceHandler) GetCategory(context.Context, *connect.Request[v1.GetCategoryRequest]) (*connect.Response[v1.GetCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.category.v1.CategoryService.GetCategory is not implemented"))
}

func (UnimplementedCategoryServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.category.v1.CategoryService.ListCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.category.v1.CategoryService.UpdateCategory is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.category.v1.CategoryService.DeleteCategory is not implemented"))
}
