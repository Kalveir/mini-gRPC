// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package repository

import (
	"context"
)

const CountCategory = `-- name: CountCategory :one
SELECT COUNT(*) FROM category WHERE id = $1
`

func (q *Queries) CountCategory(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, CountCategory, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCategory = `-- name: CreateCategory :one
INSERT INTO category (name) VALUES ($1) RETURNING id, name, created_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, CreateCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const DeleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteCategory, id)
	return err
}

const GetCategory = `-- name: GetCategory :one
SELECT id, name, created_at FROM category WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, GetCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const ListCategory = `-- name: ListCategory :many
SELECT id, name, created_at FROM category
`

func (q *Queries) ListCategory(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, ListCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCategory = `-- name: UpdateCategory :one
UPDATE category SET name = $2 WHERE id = $1 RETURNING id, name, created_at
`

type UpdateCategoryParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, UpdateCategory, arg.ID, arg.Name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
