// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package repository

import (
	"context"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO product (name,description,category_id,price) VALUES ($1,$2,$3,$4) RETURNING id, name, description, category_id, price, created_at
`

type CreateProductParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	CategoryID  int32  `json:"category_id"`
	Price       int32  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const GetProduct = `-- name: GetProduct :one
SELECT product.id, product.name, product.description, product.category_id, product.price, product.created_at, category.id, category.name, category.created_at
FROM "public".product
INNER JOIN "public".category ON ( category.id = product.category_id  ) WHERE product.id = $1 LIMIT 1
`

type GetProductRow struct {
	Product  Product  `json:"product"`
	Category Category `json:"category"`
}

func (q *Queries) GetProduct(ctx context.Context, id int32) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, GetProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.Product.ID,
		&i.Product.Name,
		&i.Product.Description,
		&i.Product.CategoryID,
		&i.Product.Price,
		&i.Product.CreatedAt,
		&i.Category.ID,
		&i.Category.Name,
		&i.Category.CreatedAt,
	)
	return i, err
}

const ListProduct = `-- name: ListProduct :many
SELECT product.id, product.name, product.description, product.category_id, product.price, product.created_at, category.id, category.name, category.created_at
FROM "public".product
INNER JOIN "public".category ON (category.id = product.category_id)
`

type ListProductRow struct {
	Product  Product  `json:"product"`
	Category Category `json:"category"`
}

func (q *Queries) ListProduct(ctx context.Context) ([]ListProductRow, error) {
	rows, err := q.db.Query(ctx, ListProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductRow{}
	for rows.Next() {
		var i ListProductRow
		if err := rows.Scan(
			&i.Product.ID,
			&i.Product.Name,
			&i.Product.Description,
			&i.Product.CategoryID,
			&i.Product.Price,
			&i.Product.CreatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE product SET name=$2, description=$3, category_id=$4, price=$5 WHERE id = $1 RETURNING id, name, description, category_id, price, created_at
`

type UpdateProductParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CategoryID  int32  `json:"category_id"`
	Price       int32  `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
